#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375
WINDOW_SIZE = 2  #Initially window is 2 (send 2 packets without waiting for ack)

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.window = []
        self.sequence_number = 0
        self.base = 0
        self.nextseqnum = 0
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            
            #to properly send data to receiver
            if len(self.window) < WINDOW_SIZE and not self.waiting: #sender not waiting for data and can fit packet into window
                data = sys.stdin.read(DATA_SIZE)
                if len(data) == 0:
                    self.log("All done!")
                    sys.exit(0)
                msg = { "type": "msg", "data": data, "sequence_number": self.sequence_number} 
                self.sequence_number += 1
                msg["timesent"] = time.time()
                self.log("Sending message '%s'" % msg)
                self.send(msg)
                self.window.append(msg) #add data to the window
                self.nextseqnum += 1
                self.waiting = True

            #Handling the acknowledgement from receiver
            if self.window:  # if window not empty
                self.socket.settimeout(0.1)  # Set a timeout of 0.1 seconds for the socket operations
                try:
                    k, addr = self.socket.recvfrom(65535)  # Attempt to receive an acknowledgment
                    ack = json.loads(k.decode('utf-8'))
                    self.log("Received ACK for sequence number: %s" % ack['acknowledgment'])
                    self.base = max(self.base, ack['acknowledgment'] + 1)
                    self.window = self.window[self.base - self.nextseqnum:]
                except socket.timeout:
                    pass
                finally:
                    self.socket.settimeout(None)  # Reset the socket timeout to its default value

            self.waiting = False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
